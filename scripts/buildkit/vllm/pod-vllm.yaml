---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dockerfile
  namespace: buildkit
data:
  Dockerfile.rocm: |
    # Default ROCm 6.2 base image
    ARG BASE_IMAGE="rocm/pytorch:rocm6.2_ubuntu20.04_py3.9_pytorch_release_2.3.0"

    # Default ROCm ARCHes to build vLLM for.
    ARG PYTORCH_ROCM_ARCH="gfx908;gfx90a;gfx942;gfx1100"

    # Whether to install CK-based flash-attention
    # If 0, will not install flash-attention
    ARG BUILD_FA="0"
    ARG FA_GFX_ARCHS="gfx90a;gfx942"
    ARG FA_BRANCH="3cea2fb"

    # Whether to build triton on rocm
    ARG BUILD_TRITON="1"
    ARG TRITON_BRANCH="e192dba"

    ### Base image build stage
    FROM $BASE_IMAGE AS base

    # Import arg(s) defined before this build stage
    ARG PYTORCH_ROCM_ARCH

    # Install some basic utilities
    RUN apt-get update && apt-get install python3 python3-pip -y
    RUN apt-get update && apt-get install -y \
        curl \
        ca-certificates \
        sudo \
        git \
        bzip2 \
        libx11-6 \
        build-essential \
        wget \
        unzip \
        tmux \
        ccache \
    && rm -rf /var/lib/apt/lists/*

    # When launching the container, mount the code directory to /vllm-workspace
    ARG APP_MOUNT=/vllm-workspace
    WORKDIR ${APP_MOUNT}

    RUN python3 -m pip install --upgrade pip
    # Remove sccache so it doesn't interfere with ccache
    # TODO: implement sccache support across components
    RUN apt-get purge -y sccache; python3 -m pip uninstall -y sccache; rm -f "$(which sccache)"

    # Install torch == 2.6.0 on ROCm
    RUN --mount=type=cache,target=/root/.cache/pip \
      python3 -m pip uninstall -y torch torchvision \
      && python3 -m pip install --pre \
          torch==2.6.0.dev20241113+rocm6.2 \
          'setuptools-scm>=8' \
          torchvision==0.20.0.dev20241113+rocm6.2 \
          --extra-index-url https://download.pytorch.org/whl/nightly/rocm6.2

    ENV LLVM_SYMBOLIZER_PATH=/opt/rocm/llvm/bin/llvm-symbolizer
    ENV PATH=$PATH:/opt/rocm/bin:/libtorch/bin:
    ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/rocm/lib/:/libtorch/lib:
    ENV CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:/libtorch/include:/libtorch/include/torch/csrc/api/include/:/opt/rocm/include/:

    ENV PYTORCH_ROCM_ARCH=${PYTORCH_ROCM_ARCH}
    ENV CCACHE_DIR=/root/.cache/ccache


    ### AMD-SMI build stage
    FROM base AS build_amdsmi
    # Build amdsmi wheel always
    RUN cd /opt/rocm/share/amd_smi \
        && python3 -m pip wheel . --wheel-dir=/install


    ### Flash-Attention wheel build stage
    FROM base AS build_fa
    ARG BUILD_FA
    ARG FA_GFX_ARCHS
    ARG FA_BRANCH
    # Build ROCm flash-attention wheel if `BUILD_FA = 1`
    RUN --mount=type=cache,target=${CCACHE_DIR} \
        if [ "$BUILD_FA" = "1" ]; then \
            mkdir -p libs \
            && cd libs \
            && git clone https://github.com/ROCm/flash-attention.git \
            && cd flash-attention \
            && git checkout "${FA_BRANCH}" \
            && git submodule update --init \
            && GPU_ARCHS="${FA_GFX_ARCHS}" python3 setup.py bdist_wheel --dist-dir=/install; \
        # Create an empty directory otherwise as later build stages expect one
        else mkdir -p /install; \
        fi


    ### Triton wheel build stage
    FROM base AS build_triton
    ARG BUILD_TRITON
    ARG TRITON_BRANCH
    # Build triton wheel if `BUILD_TRITON = 1`
    RUN --mount=type=cache,target=${CCACHE_DIR} \
        if [ "$BUILD_TRITON" = "1" ]; then \
        mkdir -p libs \
        && cd libs \
        && python3 -m pip install ninja cmake wheel pybind11 \
        && git clone https://github.com/OpenAI/triton.git \
        && cd triton \
        && git checkout "${TRITON_BRANCH}" \
        && cd python \
        && python3 setup.py bdist_wheel --dist-dir=/install; \
        # Create an empty directory otherwise as later build stages expect one
        else mkdir -p /install; \
        fi


    ### Final vLLM build stage
    FROM base AS final
    # Import the vLLM development directory from the build context
    COPY . .
    ARG GIT_REPO_CHECK=0
    RUN --mount=type=bind,source=.git,target=.git \
        if [ "$GIT_REPO_CHECK" != 0 ]; then bash tools/check_repo.sh ; fi

    RUN python3 -m pip install --upgrade pip

    # Package upgrades for useful functionality or to avoid dependency issues
    RUN --mount=type=cache,target=/root/.cache/pip \
        python3 -m pip install --upgrade numba scipy huggingface-hub[cli] pytest-shard


    # Workaround for ray >= 2.10.0
    ENV RAY_EXPERIMENTAL_NOSET_ROCR_VISIBLE_DEVICES=1
    # Silences the HF Tokenizers warning
    ENV TOKENIZERS_PARALLELISM=false

    RUN --mount=type=cache,target=${CCACHE_DIR} \
        --mount=type=bind,source=.git,target=.git \
        --mount=type=cache,target=/root/.cache/pip \
        python3 -m pip install -Ur requirements-rocm.txt \
        && python3 setup.py clean --all \
        && python3 setup.py develop

    # Copy amdsmi wheel into final image
    RUN --mount=type=bind,from=build_amdsmi,src=/install,target=/install \
        mkdir -p libs \
        && cp /install/*.whl libs \
        # Preemptively uninstall to avoid same-version no-installs
        && python3 -m pip uninstall -y amdsmi;

    # Copy triton wheel(s) into final image if they were built
    RUN --mount=type=bind,from=build_triton,src=/install,target=/install \
        mkdir -p libs \
        && if ls /install/*.whl; then \
            cp /install/*.whl libs \
            # Preemptively uninstall to avoid same-version no-installs
            && python3 -m pip uninstall -y triton; fi

    # Copy flash-attn wheel(s) into final image if they were built
    RUN --mount=type=bind,from=build_fa,src=/install,target=/install \
        mkdir -p libs \
        && if ls /install/*.whl; then \
            cp /install/*.whl libs \
            # Preemptively uninstall to avoid same-version no-installs
            && python3 -m pip uninstall -y flash-attn; fi

    # Install wheels that were built to the final image
    RUN --mount=type=cache,target=/root/.cache/pip \
        if ls libs/*.whl; then \
        python3 -m pip install libs/*.whl; fi

    # install development dependencies (for testing)
    RUN python3 -m pip install -e tests/vllm_test_utils

    CMD ["/bin/bash"]
---
apiVersion: v1
kind: Pod
metadata:
  name: buildkit
  namespace: buildkit
spec:
  hostAliases:
    - ip: 192.168.88.10
      hostnames:
        - registry.cluster.internal
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - orla
  containers:
    - name: buildkit
      image: moby/buildkit:master
      imagePullPolicy: IfNotPresent
      env:
        - name: DOCKER_CONFIG
          value: /root/.docker
        - name: RELEASE_TAG
          value: v0.6.4
      command:
        - sh
        - -c
        - |
          echo "Updating CA certs"
          update-ca-certificates
          echo "Cloning vllm"
          git clone --depth 1 --branch ${RELEASE_TAG} https://github.com/vllm-project/vllm.git /workspace
          echo "Building vllm"
          buildctl-daemonless.sh build \
            --no-cache \
            --frontend dockerfile.v0 \
            --local context=/workspace \
            --local dockerfile=/workspace \
            --opt filename=Dockerfile.rocm \
            --opt build-arg:BUILD_FA=0 \
            --output type=image,name=registry.cluster.internal/library/vllm-rocm:${RELEASE_TAG},push=true
            # --export-cache type=registry,ref=registry.cluster.internal/library/vllm-rocm:buildcache,image-manifest=true \
            # --import-cache type=registry,ref=registry.cluster.internal/library/vllm-rocm:buildcache
          sleep infinity
      resources:
        requests:
          cpu: 8000m
          memory: 64Gi
        limits:
          cpu: 15950m
          memory: 79Gi
      securityContext:
        privileged: true
      volumeMounts:
        # https://github.com/moby/buildkit/issues/879#issuecomment-1240347038
        - name: workspace
          mountPath: /workspace
        - name: dockerfile
          mountPath: /workspace/Dockerfile.rocm
        - name: registry-ca
          mountPath: /etc/ssl/certs/registry-ca.pem
          subPath: ca.crt
        - name: docker-config
          mountPath: /root/.docker
          readOnly: true
  volumes:
    - name: workspace
      emptyDir: {}
    - name: dockerfile
      configMap:
        name: dockerfile
    - name: registry-ca
      configMap:
        name: registry-ca
    - name: docker-config
      secret:
        secretName: docker-config